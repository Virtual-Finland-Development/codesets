import * as fs from 'fs';
import * as mime from 'mime';
import BuiltInternalResourcesList from "../build/internal-resources.json"; // This file is generated by the finalize-build script
import LibraryResource from "../utils/data/Resource";

const importDir = require('directory-import');
const externalResourcesImport = importDir({ directoryPath: './external' });
const libraryResourcesImport = importDir({ directoryPath: './library' });

const externalResources = Object.keys(externalResourcesImport).reduce((acc, key) => { 
    const resourceKey: string = key.replace('/', '').replace(/\.js$/, '');
    const resource = externalResourcesImport[key].default;
    
    return {
        ...acc,
        [resourceKey]: resource,
    };
}, {});

const libraryResources = Object.keys(libraryResourcesImport).reduce((acc, key) => { 
    const resourceKey: string = key.replace('/', '').replace(/\.js$/, '');
    const resource = libraryResourcesImport[key].default;
    
    return {
        ...acc,
        [resourceKey]: new LibraryResource({
            name: resourceKey,
            type: 'library',
            async dataGetter() {
                return {
                    data: JSON.stringify(resource),
                    mime: 'application/json; charset=utf-8',
                };
            }
        }),
    };
}, {});

export const InternalResources = {
    localResourcesPath: './src/resources/internal',
    localWebPath: './src/build/webroot',
    listResources(): string[] {
        return BuiltInternalResourcesList.length > 0 ? BuiltInternalResourcesList : fs.readdirSync(this.localResourcesPath);
    },
    hasResource(resourceName: string): boolean {
        return this.listResources().includes(resourceName);
    },
    async getResourcePassThrough(resourceURI: string): Promise<{ body: string, mime: string | null } | undefined> {
        try {
            const resourceFilename = resourceURI.replace('/resources/', '').replace('/', '');
            const resourcePath = resourceFilename.endsWith(".html") ? this.localWebPath : this.localResourcesPath;
            const filePath = `${resourcePath}/${resourceFilename}`;

            return {
                body: await fs.promises.readFile(filePath, 'utf8'),
                mime: mime.getType(filePath),
            };
        } catch (error) {}
        return;
    }
}

export default {
    ...externalResources,
    ...libraryResources,
};