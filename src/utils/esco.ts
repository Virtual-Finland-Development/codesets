import { getLocalesFilter, getSearchPhrases, isEnabledFormat } from './filters';
import { omitObjectKeys } from './helpers';

export interface EscoDataUnit {
    uri: string;
    prefLabel: {
        [key: string]: string;
    };
    notation?: string;
    broader?: string[];
    narrower?: EscoDataUnit[]; // Generated by the "tree" formats parameter
}

export function filterCommonEscoDataSet<T extends EscoDataUnit>(items: T[], params: Record<string, string>) {
    const localesFilter = getLocalesFilter(params);
    if (localesFilter.length > 0) {
        items = items.map((item: T) => {
            const filteredPrefLabel = Object.entries(item.prefLabel).reduce((acc, [key, value]) => {
                if (localesFilter.includes(key)) {
                    acc[key] = value;
                }
                return acc;
            }, {} as any);
            return {
                ...item,
                prefLabel: filteredPrefLabel,
            };
        });
    }

    const searchPhrases = getSearchPhrases(params);
    if (searchPhrases.length > 0) {
        return items.filter((item: T) => {
            const descriptions = Object.values(item.prefLabel).map((text) => {
                return text.toLocaleLowerCase();
            });
            return searchPhrases.some((phrase: string) => {
                return descriptions.some((description: string) => {
                    return description.includes(phrase);
                });
            });
        });
    }

    if (isEnabledFormat(params, 'tree')) {
        items = formatToEscoTree<T>(items);
    }

    return items.map((item: T) => omitObjectKeys(item, ['broader']));
}

/**
 * Generate tree structure from flat array of ESCo data units
 *
 * @param items
 * @returns
 */
export function formatToEscoTree<T extends EscoDataUnit>(items: T[]): T[] {
    const tree: T[] = [];
    const map = new Map<string, T>();
    items.forEach((item) => {
        map.set(item.uri, item);
    });
    items.forEach((item) => {
        const parentUri = item.broader?.[0];
        if (typeof parentUri === 'string') {
            const parent = map.get(parentUri);
            if (parent) {
                if (!parent.narrower) {
                    parent.narrower = [];
                }
                parent.narrower.push(omitObjectKeys(item, ['broader']));
            } else {
                tree.push(item);
            }
        } else {
            tree.push(item);
        }
    });

    return tree;
}
